package com.maxx_global.event;

import com.maxx_global.dto.appUser.AppUserResponse;
import com.maxx_global.dto.notification.NotificationRequest;
import com.maxx_global.entity.AppUser;
import com.maxx_global.entity.Notification;
import com.maxx_global.entity.Order;
import com.maxx_global.enums.NotificationStatus;
import com.maxx_global.enums.NotificationType;
import com.maxx_global.service.AppUserService;
import com.maxx_global.service.NotificationService;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.logging.Logger;

@Service
public class NotificationEventService {

    private static final Logger logger = Logger.getLogger(NotificationEventService.class.getName());

    private final NotificationService notificationService;
    private final AppUserService appUserService;

    public NotificationEventService(NotificationService notificationService, AppUserService appUserService) {
        this.notificationService = notificationService;
        this.appUserService = appUserService;
    }

    /**
     * Sipari≈ü olu≈üturulduƒüunda bildirim g√∂nder
     */
    public void sendOrderCreatedNotification(Order order) {
        logger.info("Sending order created notification for order: " + order.getOrderNumber());

        List<AppUser> users = appUserService.getUsersWithUserPermissions(List.of("ORDER_NOTIFICATION","SYSTEM_ADMIN"));

        try {
            NotificationRequest request = new NotificationRequest(
                    order.getUser().getId(),
                    "Yeni Sipari≈ü Olu≈üturuldu üìù",
                    String.format("Sipari≈ü numaranƒ±z: %s olu≈üturuldu. Toplam tutar: %.2f %s. " +
                                    "Sipari≈üiniz onay i√ßin deƒüerlendiriliyor.",
                            order.getOrderNumber(),
                            order.getTotalAmount(),
                            order.getCurrency()),
                    NotificationType.ORDER_CREATED,
                    order.getId(),
                    "ORDER",
                    "MEDIUM",
                    "shopping-cart",
                    "/orders/" + order.getId(),
                    null
            );

            NotificationRequest requestForAdmin = new NotificationRequest(
                    order.getUser().getId(),
                    "Yeni bir Sipari≈ü var. üìù",
                    String.format("Sipari≈ü numarasƒ±: %s olu≈üturuldu. Toplam tutar: %.2f %s. " +
                                    "Sipari≈ü listesi sayfasƒ±ndan i≈ülem yapabilirsiniz.",
                            order.getOrderNumber(),
                            order.getTotalAmount(),
                            order.getCurrency()),
                    NotificationType.ORDER_CREATED,
                    order.getId(),
                    "ORDER",
                    "MEDIUM",
                    "shopping-cart",
                    "admin/orders/" + order.getId(),
                    null
            );

            notificationService.createNotificationByEvent(request);
            notificationService.createNotificationForAdminByEvent(requestForAdmin, users);
            logger.info("Order created notification sent successfully");

        } catch (Exception e) {
            logger.severe("Error sending order created notification: " + e.getMessage());
        }
    }

    /**
     * Sipari≈ü onaylandƒ±ƒüƒ±nda bildirim g√∂nder
     */
    public void sendOrderApprovedNotification(Order order, AppUser approvedBy) {
        logger.info("Sending order approved notification for order: " + order.getOrderNumber());

        try {
            String approverName = approvedBy != null ?
                    approvedBy.getFirstName() + " " + approvedBy.getLastName() : "Y√∂netici";

            NotificationRequest request = new NotificationRequest(
                    order.getUser().getId(),
                    "Sipari≈üiniz Onaylandƒ±! ‚úÖ",
                    String.format("Sipari≈ü numaranƒ±z %s onaylandƒ± ve i≈üleme alƒ±ndƒ±. " +
                                    "Sipari≈ü durumunu takip edebilirsiniz.",
                            order.getOrderNumber()),
                    NotificationType.ORDER_APPROVED,
                    order.getId(),
                    "ORDER",
                    "HIGH",
                    "check-circle",
                    "/orders/" + order.getId(),
                    String.format("{\"approvedBy\":\"%s\",\"approvedAt\":\"%s\"}",
                            approverName, java.time.LocalDateTime.now())
            );

            notificationService.createNotification(request);
            logger.info("Order approved notification sent successfully");

        } catch (Exception e) {
            logger.severe("Error sending order approved notification: " + e.getMessage());
        }
    }

    /**
     * Sipari≈ü reddedildiƒüinde bildirim g√∂nder
     */
    public void sendOrderRejectedNotification(Order order, String rejectionReason) {
        logger.info("Sending order rejected notification for order: " + order.getOrderNumber());

        try {
            String reason = rejectionReason != null && !rejectionReason.trim().isEmpty() ?
                    rejectionReason : "Red nedeni belirtilmemi≈ü";

            NotificationRequest request = new NotificationRequest(
                    order.getUser().getId(),
                    "Sipari≈üiniz Reddedildi ‚ùå",
                    String.format("Sipari≈ü numaranƒ±z %s reddedildi. " +
                                    "Red nedeni: %s. Detaylar i√ßin sipari≈ü sayfasƒ±nƒ± ziyaret edin.",
                            order.getOrderNumber(), reason),
                    NotificationType.ORDER_REJECTED,
                    order.getId(),
                    "ORDER",
                    "HIGH",
                    "x-circle",
                    "/orders/" + order.getId(),
                    String.format("{\"rejectionReason\":\"%s\"}", reason)
            );

            notificationService.createNotification(request);
            logger.info("Order rejected notification sent successfully");

        } catch (Exception e) {
            logger.severe("Error sending order rejected notification: " + e.getMessage());
        }
    }

    /**
     * Sipari≈ü d√ºzenlendiƒüinde bildirim g√∂nder
     */
    public void sendOrderEditedNotification(Order order) {
        logger.info("Sending order edited notification for order: " + order.getOrderNumber());

        try {
            AppUserResponse editedBy = appUserService.getUserById(order.getUpdatedBy());
            String editorName = editedBy != null ?
                    editedBy.firstName() + " " + editedBy.lastName() : "Y√∂netici";

            NotificationRequest request = new NotificationRequest(
                    order.getUser().getId(),
                    "Sipari≈üiniz D√ºzenlendi üìù",
                    String.format("Sipari≈ü numaranƒ±z %s y√∂netici tarafƒ±ndan d√ºzenlendi. " +
                                    "Deƒüi≈üiklikleri inceleyin ve onaylayƒ±n.",
                            order.getOrderNumber()),
                    NotificationType.ORDER_EDITED,
                    order.getId(),
                    "ORDER",
                    "HIGH",
                    "edit",
                    "/orders/" + order.getId() + "/edited",
                    String.format("{\"editedBy\":\"%s\",\"editedAt\":\"%s\"}",
                            editorName, java.time.LocalDateTime.now())
            );

            notificationService.createNotification(request);
            logger.info("Order edited notification sent successfully");

        } catch (Exception e) {
            logger.severe("Error sending order edited notification: " + e.getMessage());
        }
    }

    /**
     * Sipari≈ü durumu deƒüi≈ütiƒüinde bildirim g√∂nder
     */
    public void sendOrderStatusChangeNotification(Order order, String newStatus, String statusNote) {
        logger.info("Sending order status change notification for order: " + order.getOrderNumber() +
                " to status: " + newStatus);

        try {
            String title = getStatusChangeTitle(newStatus);
            String message = getStatusChangeMessage(order.getOrderNumber(), newStatus, statusNote);
            String icon = getStatusChangeIcon(newStatus);
            NotificationType notificationType = getStatusChangeNotificationType(newStatus);
            String priority = getStatusChangePriority(newStatus);

            NotificationRequest request = new NotificationRequest(
                    order.getUser().getId(),
                    title,
                    message,
                    notificationType,
                    order.getId(),
                    "ORDER",
                    priority,
                    icon,
                    "/orders/" + order.getId(),
                    String.format("{\"newStatus\":\"%s\",\"statusNote\":\"%s\",\"changedAt\":\"%s\"}",
                            newStatus, statusNote != null ? statusNote : "", java.time.LocalDateTime.now())
            );

            notificationService.createNotification(request);
            logger.info("Order status change notification sent successfully");

        } catch (Exception e) {
            logger.severe("Error sending order status change notification: " + e.getMessage());
        }
    }

    // NotificationEventService.java - Yeni metod ekle

    /**
     * M√º≈üteri d√ºzenlenmi≈ü sipari≈üi reddettiƒüinde admin'lere notification g√∂nder
     */
    // NotificationEventService.java - Yeni metod ekle

    /**
     * M√º≈üteri d√ºzenlenmi≈ü sipari≈üi reddettiƒüinde admin'lere notification g√∂nder
     */
    public void sendOrderEditRejectedNotification(Order order, String rejectionReason) {
        try {
            logger.info("Creating order edit rejected notifications for order: " + order.getOrderNumber());

            // Admin ve super admin kullanƒ±cƒ±larƒ±nƒ± getir
            List<AppUser> adminUsers = appUserService.getUsersWithUserPermissions(Collections.singletonList("ORDER_NOTIFICATION"));

            if (adminUsers.isEmpty()) {
                logger.warning("No admin users found for order edit rejected notification");
                return;
            }

            String title = "M√º≈üteri D√ºzenlemeyi Reddetti";
            String message = String.format(
                    "M√º≈üteri %s, sipari≈ü %s i√ßin yapƒ±lan d√ºzenlemeleri reddetti. " +
                            "Red nedeni: %s. Sipari≈ü iptal edildi ve stoklar iade edildi.",
                    order.getUser().getFirstName() + " " + order.getUser().getLastName(),
                    order.getOrderNumber(),
                    rejectionReason != null && !rejectionReason.trim().isEmpty()
                            ? rejectionReason
                            : "Belirtilmemi≈ü"
            );

            // Her admin i√ßin notification olu≈ütur
            for (AppUser admin : adminUsers) {
                try {
                    Notification notification = new Notification();
                    notification.setTitle(title);
                    notification.setMessage(message);
                    notification.setType(NotificationType.ORDER_REJECTED); // Mevcut type kullan
                    notification.setNotificationStatus(NotificationStatus.UNREAD);
                    notification.setRelatedEntityType("ORDER");
                    notification.setRelatedEntityId(order.getId());
                    notification.setPriority("HIGH"); // Y√ºksek √∂ncelik

                    // Ek data - Manual JSON string olu≈ütur
                    String dataJson = String.format(
                            "{\"orderId\":%d,\"orderNumber\":\"%s\",\"customerName\":\"%s\",\"dealerName\":\"%s\",\"totalAmount\":\"%s\",\"rejectionReason\":\"%s\",\"rejectionTime\":\"%s\",\"action\":\"ORDER_EDIT_REJECTED\"}",
                            order.getId(),
                            order.getOrderNumber(),
                            order.getUser().getFirstName() + " " + order.getUser().getLastName(),
                            order.getUser().getDealer().getName(),
                            order.getTotalAmount().toString(),
                            rejectionReason != null ? rejectionReason.replace("\"", "\\\"") : "", // Escape quotes
                            LocalDateTime.now()
                    );
                    notification.setData(dataJson);

                    notificationService.saveNotification(notification);
                    logger.info("Order edit rejected notification created for admin: " + admin.getEmail());

                } catch (Exception e) {
                    logger.severe("Error creating order edit rejected notification for admin " +
                            admin.getEmail() + ": " + e.getMessage());
                }
            }

            logger.info("Order edit rejected notifications created for " + adminUsers.size() + " admins");

        } catch (Exception e) {
            logger.severe("Error sending order edit rejected notifications: " + e.getMessage());
            // Bu hata notification g√∂nderimini engellemez, sadece log'lanƒ±r
        }
    }

    /**
     * Otomatik iptal bildirimi g√∂nder
     */
    public void sendOrderAutoCancelledNotification(Order order, String reason, int hoursWaited) {
        logger.info("Sending order auto-cancelled notification for order: " + order.getOrderNumber());

        try {
            NotificationRequest request = new NotificationRequest(
                    order.getUser().getId(),
                    "Sipari≈üiniz Otomatik ƒ∞ptal Edildi ‚è∞",
                    String.format("Sipari≈ü numaranƒ±z %s, %d saat onay bekledikten sonra " +
                                    "sistem tarafƒ±ndan otomatik olarak iptal edildi. " +
                                    "Sebep: %s",
                            order.getOrderNumber(), hoursWaited, reason),
                    NotificationType.ORDER_CANCELLED,
                    order.getId(),
                    "ORDER",
                    "HIGH",
                    "clock",
                    "/orders/" + order.getId(),
                    String.format("{\"autoCancelReason\":\"%s\",\"hoursWaited\":%d}",
                            reason, hoursWaited)
            );

            notificationService.createNotification(request);
            logger.info("Order auto-cancelled notification sent successfully");

        } catch (Exception e) {
            logger.severe("Error sending order auto-cancelled notification: " + e.getMessage());
        }
    }

    // Helper metodlar
    private String getStatusChangeTitle(String status) {
        return switch (status.toUpperCase()) {
            case "SHIPPED" -> "Sipari≈üiniz Kargoya Verildi üöö";
            case "DELIVERED" -> "Sipari≈üiniz Teslim Edildi ‚úÖ";
            case "COMPLETED" -> "Sipari≈üiniz Tamamlandƒ± üéâ";
            case "CANCELLED" -> "Sipari≈üiniz ƒ∞ptal Edildi ‚ùå";
            case "PENDING" -> "Sipari≈üiniz Onay Bekliyor ‚è≥";
            case "APPROVED" -> "Sipari≈üiniz Onaylandƒ± ‚úÖ";
            default -> "Sipari≈ü Durumu G√ºncellendi üìã";
        };
    }

    private String getStatusChangeMessage(String orderNumber, String status, String statusNote) {
        String baseMessage = switch (status.toUpperCase()) {
            case "SHIPPED" -> "Sipari≈ü numaranƒ±z %s kargoya verildi. Kargo takip bilgileri e-posta ile g√∂nderilecek.";
            case "DELIVERED" -> "Sipari≈ü numaranƒ±z %s ba≈üarƒ±yla teslim edildi. Te≈üekk√ºr ederiz!";
            case "COMPLETED" -> "Sipari≈ü numaranƒ±z %s tamamlandƒ±. Bizi tercih ettiƒüiniz i√ßin te≈üekk√ºrler.";
            case "CANCELLED" -> "Sipari≈ü numaranƒ±z %s iptal edildi.";
            case "PENDING" -> "Sipari≈ü numaranƒ±z %s onay i√ßin bekliyor.";
            case "APPROVED" -> "Sipari≈ü numaranƒ±z %s onaylandƒ± ve i≈üleme alƒ±ndƒ±.";
            default -> "Sipari≈ü numaranƒ±z %s durumu g√ºncellendi: " + status;
        };

        String message = String.format(baseMessage, orderNumber);

        if (statusNote != null && !statusNote.trim().isEmpty()) {
            message += " Not: " + statusNote;
        }

        return message;
    }

    private String getStatusChangeIcon(String status) {
        return switch (status.toUpperCase()) {
            case "SHIPPED" -> "truck";
            case "DELIVERED", "COMPLETED" -> "check-circle";
            case "CANCELLED" -> "x-circle";
            case "PENDING" -> "clock";
            case "APPROVED" -> "check";
            default -> "info";
        };
    }

    private NotificationType getStatusChangeNotificationType(String status) {
        return switch (status.toUpperCase()) {
            case "SHIPPED" -> NotificationType.ORDER_SHIPPED;
            case "DELIVERED", "COMPLETED" -> NotificationType.ORDER_DELIVERED;
            case "CANCELLED" -> NotificationType.ORDER_CANCELLED;
            case "APPROVED" -> NotificationType.ORDER_APPROVED;
            default -> NotificationType.ORDER_CREATED;
        };
    }

    private String getStatusChangePriority(String status) {
        return switch (status.toUpperCase()) {
            case "DELIVERED", "COMPLETED", "CANCELLED" -> "HIGH";
            case "SHIPPED", "APPROVED" -> "MEDIUM";
            default -> "LOW";
        };
    }
}