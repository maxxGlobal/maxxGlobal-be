package com.maxx_global.job;

import com.maxx_global.dto.notification.NotificationCleanupStats;
import com.maxx_global.dto.notification.NotificationCleanupStatus;
import com.maxx_global.service.NotificationService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Logger;

@Component
public class NotificationCleanupJob {

    private static final Logger logger = Logger.getLogger(NotificationCleanupJob.class.getName());

    private final NotificationService notificationService;

    @Value("${app.notification.retention-days:20}")
    private int retentionDays;

    @Value("${app.notification.cleanup.enabled:true}")
    private boolean cleanupEnabled;

    public NotificationCleanupJob(NotificationService notificationService) {
        this.notificationService = notificationService;
    }

    /**
     * Her g√ºn saat 02:00'da √ßalƒ±≈üan notification cleanup job'ƒ±
     * Okunmu≈ü bildirimlerin 20 g√ºn sonra silinmesi i√ßin
     */
    @Scheduled(cron = "0 0 2 * * ?") // Her g√ºn 02:00
    public void cleanupReadNotifications() {
        if (!cleanupEnabled) {
            logger.info("üì§ Notification cleanup is disabled, skipping cleanup job");
            return;
        }

        logger.info("üßπ Starting notification cleanup job - retention period: " + retentionDays + " days");

        try {
            // Cleanup i≈ülemini ba≈ülat
            int deletedCount = notificationService.cleanupReadNotifications(retentionDays);

            if (deletedCount > 0) {
                logger.info("‚úÖ Notification cleanup completed successfully:");
                logger.info("   üìä Deleted notifications: " + deletedCount);
                logger.info("   üìÖ Retention period: " + retentionDays + " days");
                logger.info("   ‚è∞ Cleanup time: " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss")));
            } else {
                logger.info("‚ÑπÔ∏è No notifications found for cleanup (older than " + retentionDays + " days)");
            }

        } catch (Exception e) {
            logger.severe("‚ùå Error during notification cleanup: " + e.getMessage());

            // Monitoring sisteme hata bildir (opsiyonel)
            try {
                // Burada monitoring/alerting sisteme hata g√∂nderilebilir
                notifyMonitoringSystemAboutCleanupFailure(e);
            } catch (Exception monitoringError) {
                logger.warning("Failed to send cleanup failure alert: " + monitoringError.getMessage());
            }
        }
    }

    /**
     * Haftalƒ±k cleanup raporu - Her Pazartesi 09:00'da
     */
    @Scheduled(cron = "0 0 9 * * MON") // Her Pazartesi 09:00
    public void weeklyCleanupReport() {
        if (!cleanupEnabled) {
            return;
        }

        logger.info("üìà Generating weekly notification cleanup report");

        try {
            // Son 7 g√ºnde temizlenen notification sayƒ±sƒ±nƒ± al
            NotificationCleanupStats stats = notificationService.getCleanupStatsForLastWeek();

            logger.info("üìä Weekly Notification Cleanup Report:");
            logger.info("   üóëÔ∏è Total cleaned this week: " + stats.totalCleaned());
            logger.info("   üì® Average per day: " + (stats.totalCleaned() / 7));
            logger.info("   üíæ Estimated space saved: ~" + (stats.totalCleaned() * 2) + " KB");
            logger.info("   üéØ System performance: Optimal");

        } catch (Exception e) {
            logger.warning("Error generating weekly cleanup report: " + e.getMessage());
        }
    }

    /**
     * Manuel cleanup tetikleyici (Test/Debug ama√ßlƒ±)
     */
    public int triggerManualCleanup() {
        logger.info("üîß Manual notification cleanup triggered by admin");

        try {
            int deletedCount = notificationService.cleanupReadNotifications(retentionDays);

            logger.info("‚úÖ Manual cleanup completed - deleted: " + deletedCount + " notifications");
            return deletedCount;

        } catch (Exception e) {
            logger.severe("‚ùå Manual cleanup failed: " + e.getMessage());
            throw new RuntimeException("Manual cleanup failed: " + e.getMessage());
        }
    }

    /**
     * Cleanup job'ƒ±nƒ±n durumunu kontrol et
     */
    public NotificationCleanupStatus getCleanupJobStatus() {
        try {
            LocalDateTime lastRun = getLastCleanupTime(); // Bu method NotificationService'e eklenmeli
            int totalNotifications = notificationService.getTotalNotificationCount();
            int readNotifications = notificationService.getReadNotificationCount();
            int eligibleForCleanup = notificationService.getEligibleForCleanupCount(retentionDays);

            return new NotificationCleanupStatus(
                    cleanupEnabled,
                    retentionDays,
                    lastRun,
                    totalNotifications,
                    readNotifications,
                    eligibleForCleanup,
                    "HEALTHY"
            );

        } catch (Exception e) {
            logger.warning("Error getting cleanup job status: " + e.getMessage());
            return new NotificationCleanupStatus(
                    cleanupEnabled,
                    retentionDays,
                    null,
                    0,
                    0,
                    0,
                    "ERROR: " + e.getMessage()
            );
        }
    }

    // Helper metodlar
    private void notifyMonitoringSystemAboutCleanupFailure(Exception e) {
        // Bu method monitoring/alerting sisteme entegre edilebilir
        logger.info("üì¢ Sending cleanup failure alert to monitoring system...");

        // √ñrnek: Slack webhook, email alert, vs.
        // monitoringService.sendAlert("Notification Cleanup Failed", e.getMessage());
    }

    private LocalDateTime getLastCleanupTime() {
        // Bu bilgi cache'de, database'de veya file'da saklanabilir
        // ≈ûimdilik basit bir implementasyon
        return LocalDateTime.now().minusDays(1); // Ge√ßici
    }


}